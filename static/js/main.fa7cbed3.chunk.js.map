{"version":3,"sources":["components/ChatListItem/ChatListItem.tsx","components/ChatList/ChatList.tsx","components/DeleteIcon/DeleteIcon.tsx","utils/utils.ts","components/Message/Message.tsx","components/AddMessageForm/AddMessageForm.tsx","components/Chat/Chat.tsx","data/initialMessageList.ts","modules/dataStorage.ts","components/AutorizationForm/AutorizationForm.tsx","components/Messanger/Messanger.tsx","data/initilalChatList.ts","components/App/App.tsx","index.tsx"],"names":["ChatListItem","chat","history","getSelectChatId","onClick","chatName","name","push","className","location","pathname","replace","src","imageUrl","alt","ChatList","props","chats","map","key","id","DeleteIcon","xmlns","viewBox","x","y","width","height","d","transform","textOptions","messageText","test","fontWeight","console","log","fontStyle","textDecoration","fontFamily","Message","message","currentUser","deleteMessage","event","target","classList","contains","author","style","text","slice","length","timestamp","messageDate","Date","hours","getHours","toString","minutes","getMinutes","padStart","translateDate","date","AddMessageForm","state","handleChange","setState","value","handleKeyDown","shiftKey","preventDefault","submitMessage","handleSubmit","addMessage","onSubmit","this","onKeyDown","onChange","required","type","Component","Chat","messageList","messages","today","initialMessageList","users","login","avatarUrl","getTime","DataStorage","chatList","nameActiveChat","localStorage","JSON","stringify","parse","user","nameChat","temp","getMessageList","messagesListItem","AutorizationForm","password","validity","inputValidity","getCurrentUser","placeholder","autoComplete","dataStorage","lastMessageText","initStorage","Messanger","getNameActiveChat","nameCurrentChat","setMessageList","setNameActiveChat","addNewMessage","idNewMessage","prevState","concat","setStorage","idMessage","filter","getcurrentUser","setCurrentUser","addCurrentUser","exact","path","getChatList","MessangerWithRouter","withRouter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa7cbed3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChatListItem.css';\r\nimport { chatListItem } from '../../types';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype ChatListItemProps = {\r\n  chat: chatListItem,\r\n  getSelectChatId: (chatName: string) => void\r\n};\r\n\r\n\r\nexport const ChatListItem:React.FC<ChatListItemProps & RouteComponentProps> = ({ chat, history, getSelectChatId }) => {\r\n\r\n  const handleClick = (chatName: string) => {\r\n    history.push(`/planktonics-intranet/messenger/chats/${chatName}`);\r\n    getSelectChatId(chatName);\r\n  }\r\n\r\n  // добавление класса active для активного чата\r\n  const classNameActiveChat = () => {\r\n    return chat.name === history.location.pathname.replace(/\\/messenger\\/chats\\/(.*)/, '$1') ? \"ChatListItem ChatListItem_active\" : \"ChatListItem\";\r\n  }\r\n\r\n  return (\r\n    <div onClick={ () => handleClick(chat.name) } className={ classNameActiveChat() }>\r\n      <img src={ chat.imageUrl } alt=\"\" className=\"ChatListItem__image\"/>\r\n      <h3 className=\"ChatListItem__name\">{ chat.name }</h3>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './ChatList.css';\r\nimport { ChatListItem } from '../ChatListItem/ChatListItem';\r\nimport { chatListItem } from '../../types';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype ChatListProps = {\r\n  chats: chatListItem [],\r\n  getSelectChatId: (chatName: string) => void\r\n};\r\n\r\nexport const ChatList:React.FC<ChatListProps & RouteComponentProps> = ( props ) => {\r\n  return (\r\n    <div className=\"ChatList\">\r\n      {props.chats.map(chat => <ChatListItem chat={ chat } key={ chat.id } { ...props } getSelectChatId={ props.getSelectChatId } />)}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './DeleteIcon.css';\r\n\r\nexport const DeleteIcon: React.FC = () => {\r\n\r\n  return(\r\n    <svg className=\"DeleteIcon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 39 47.9\">\r\n      <rect x=\"12\" y=\"14.9\" width=\"3\" height=\"24\"/>\r\n      <rect x=\"18\" y=\"14.9\" width=\"3\" height=\"24\"/>\r\n      <rect x=\"24\" y=\"14.9\" width=\"3\" height=\"24\"/>\r\n      <path d=\"M51.5,13.9H39.4V12.4A4.44,4.44,0,0,0,35,8H29a4.44,4.44,0,0,0-4.4,4.4v1.5H12.5v3h3.11L18.3,51.5A4.85,4.85,0,0,0,23,55.9H41a4.77,4.77,0,0,0,4.7-4.4l2.69-34.6H51.5ZM27.4,12.4A1.58,1.58,0,0,1,29,10.8h6a1.58,1.58,0,0,1,1.6,1.6v1.5H27.4ZM42.7,51.3A1.74,1.74,0,0,1,41,52.9H23a1.81,1.81,0,0,1-1.7-1.6L18.62,16.9H45.38Z\" transform=\"translate(-12.5 -8)\"/>\r\n    </svg>\r\n  );\r\n}","// получение даты из timestamp и изменение формата даты\r\nexport function translateDate(timestamp: number): string {\r\n  const messageDate = new Date(timestamp);\r\n  let hours = messageDate.getHours().toString();\r\n  let minutes = messageDate.getMinutes().toString();\r\n  if (minutes.length < 2) {\r\n    minutes = minutes.padStart(2, '0');\r\n  }\r\n  if (hours.length < 2) {\r\n    hours = hours.padStart(2, '0');\r\n  }\r\n  return `${hours}:${minutes}`;\r\n}\r\n\r\n// форматирование сообщений\r\n// *текст* - жирный шрифт\r\n// _текст_ - курсив\r\n// ~текст~ - зачеркивание\r\n// ```текст```- моноширинный\r\nexport const textOptions = (messageText: string): { [key: string]: string } | {} => {\r\n  if (/^\\*.*\\*$/.test(messageText)) {\r\n    return {fontWeight: '900'}\r\n  }\r\n  if (/^_.*_$/.test(messageText)) {\r\n    console.log(messageText);\r\n    return {fontStyle: 'Italic'}\r\n  }\r\n  if (/^~.*~$/.test(messageText)) {\r\n    return {textDecoration: 'line-through'}\r\n  }\r\n  if (/^```.*```$/.test(messageText)) {\r\n    return {fontFamily: 'Courier New'}\r\n  }\r\n  return {};\r\n}\r\n\r\n// часть строки сообщения без символов форматирования\r\nexport const messageText = (messageText: string): string => {\r\n  if (/^\\*.*\\*$/.test(messageText)) {\r\n    return messageText.slice(1, messageText.length - 1);\r\n  }\r\n  if (/^_.*_$/.test(messageText)) {\r\n    return messageText.slice(1, messageText.length - 1);\r\n  }\r\n  if (/^~.*~$/.test(messageText)) {\r\n    return  messageText.slice(1, messageText.length - 1);\r\n  }\r\n  if (/^```.*```$/.test(messageText)) {\r\n    return messageText.slice(3, messageText.length - 3);\r\n  }\r\n  return messageText;\r\n}","import React from 'react';\r\nimport './Message.css';\r\nimport { message } from '../../types';\r\nimport { DeleteIcon } from '../DeleteIcon/DeleteIcon';\r\nimport { translateDate, textOptions, messageText } from '../../utils/utils';\r\n\r\ntype MessageProps = {\r\n  message: message, \r\n  currentUser: string,\r\n  deleteMessage: (idMessage: string) => void,\r\n};\r\n\r\nexport const Message: React.FC<MessageProps> = ({ message, currentUser, deleteMessage }) => {\r\n\r\n  // удаление добавленных сообщений\r\n  const handleClickDelete = (event: React.MouseEvent<HTMLElement>): void => {\r\n    const target = event.target as HTMLElement;\r\n    if (target.classList.contains('DeleteIcon')) {\r\n      deleteMessage(message.id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div onClick={ handleClickDelete } className=\"Message\">\r\n        <header className=\"Message__header\">\r\n          <h3 className=\"Message__author\">{message.author}</h3>\r\n          {message.author === currentUser ? <DeleteIcon /> : null }\r\n        </header>\r\n        <p style={ textOptions(message.text) } className=\"Message__text\">{messageText(message.text)}\r\n          <time className=\"Message__date\">{translateDate(message.date)}</time>\r\n        </p>\r\n      </div>\r\n      <br />\r\n    </div>\r\n  );\r\n};","import React, { Component, FormEvent, ChangeEvent } from 'react';\r\nimport './AddMessageForm.css';\r\n\r\ntype stateProps = {\r\n  messageText: string,\r\n};\r\n\r\ntype AddMessagesFormProps = {\r\n  addMessage: (message: string) => void\r\n};\r\n\r\nexport class AddMessageForm extends Component<AddMessagesFormProps> {\r\n\r\n  state: stateProps = {\r\n    messageText: '', \r\n  };\r\n\r\n  handleChange = (event: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    this.setState({messageText: event.target.value});\r\n  }\r\n\r\n  // Enter - отправка сообщения\r\n  // Shift + Enter - перенос строки\r\n  handleKeyDown = (event: React.KeyboardEvent<HTMLFormElement>): void => {\r\n    if (!event.shiftKey && event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.submitMessage();\r\n    }\r\n  }\r\n\r\n  // отправка формы по нажатию на кнопку отправить или по нажатию на Enter, если не нажат Shift\r\n  handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault();\r\n    this.submitMessage();\r\n  }\r\n\r\n  // отправка сообщения\r\n  submitMessage = () => {\r\n    if (this.state.messageText.length > 0) {\r\n      this.props.addMessage(this.state.messageText);\r\n      this.setState({messageText: ''});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={ this.handleSubmit } \r\n            onKeyDown={ this.handleKeyDown }\r\n            className=\"form\">\r\n        <textarea name=\"message\" \r\n                  id=\"message\" \r\n                  className=\"form__textarea\"\r\n                  value={ this.state.messageText }\r\n                  onChange={ this.handleChange }\r\n                  required />\r\n        <button type=\"submit\" className=\"form__button\">Отправить</button>\r\n      </form>\r\n    )\r\n  }\r\n};","import React from 'react';\r\nimport './Chat.css';\r\nimport { user, message } from '../../types';\r\nimport { Message } from '../Message/Message';\r\nimport { AddMessageForm } from '../AddMessageForm/AddMessageForm';\r\n\r\ntype ChatProps = {\r\n  messageList: {\r\n    users: user [],\r\n    messages: message []\r\n  },\r\n  addMessage: (message: string) => void,\r\n  deleteMessage: (idMessage: string) => void,\r\n  currentUser: string\r\n};\r\n\r\nexport const Chat:React.FC<ChatProps> = ({ messageList, addMessage, currentUser, deleteMessage }) => {\r\n\r\n  return (\r\n    <div className=\"Chat\">\r\n      <div className=\"Chat__list\">\r\n        {messageList?.messages?.map(message => <Message message={ message } key={message.id} currentUser={ currentUser } deleteMessage={ deleteMessage } />)}\r\n      </div>\r\n      <AddMessageForm addMessage={ addMessage } />\r\n    </div>\r\n  );\r\n \r\n};","import { messageList } from '../types';\r\n\r\nconst today:Date = new Date();\r\n\r\nexport const initialMessageList: messageList = {\r\n  'general': {\r\n    users: [\r\n      {\r\n        login: 'piligrim',\r\n        avatarUrl: 'https://img.freepik.com/free-photo/_23-2147868989.jpg?size=626&ext=jpg'\r\n      },\r\n      {\r\n        login: 'ryoka',\r\n        avatarUrl: 'https://img.freepik.com/free-photo/3d_1048-6284.jpg?size=338&ext=jpg'\r\n      }\r\n    ],\r\n    messages: [\r\n      {\r\n        date: today.getTime(),\r\n        author: 'piligrim',\r\n        text: 'Lorem ipsum dolor',\r\n        id: '0001'\r\n      },\r\n      {\r\n        date: today.getTime(),\r\n        author: 'piligrim',\r\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua',\r\n        id: '0002'\r\n      },\r\n      {\r\n        date: today.getTime(),\r\n        author: 'piligrim',\r\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',\r\n        id: '0003'\r\n      },\r\n      {\r\n        date: today.getTime(),\r\n        author: 'piligrim',\r\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua',\r\n        id: '0004'\r\n      },\r\n      {\r\n        date: today.getTime(),\r\n        author: 'piligrim',\r\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore',\r\n        id: '0005'\r\n      }\r\n    ]\r\n  },\r\n  'communications': {\r\n    users: [\r\n      {\r\n        login: 'piligrim',\r\n        avatarUrl: 'https://img.freepik.com/free-photo/_23-2147868989.jpg?size=626&ext=jpg'\r\n      },\r\n      {\r\n        login: 'ryoka',\r\n        avatarUrl: 'https://img.freepik.com/free-photo/3d_1048-6284.jpg?size=338&ext=jpg'\r\n      }\r\n    ],\r\n    messages: [\r\n      {\r\n        date: today.getTime(),\r\n        author: 'piligrim',\r\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua',\r\n        id: '0001'\r\n      },\r\n      {\r\n        date: today.getTime(),\r\n        author: 'ryoka',\r\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua',\r\n        id: '0002'\r\n      },\r\n      {\r\n        date: today.getTime(),\r\n        author: 'ryoka',\r\n        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua',\r\n        id: '0003'\r\n      },\r\n    ]\r\n  },\r\n};","import { chatListItem, messageList, message, user } from '../types';\r\n\r\ninterface DataStorageProps  {\r\n  chatList: chatListItem [];\r\n  messageList: messageList;\r\n  nameActiveChat: string;\r\n  currentUser: string;\r\n};\r\n\r\nexport class DataStorage implements DataStorageProps {\r\n  \r\n  chatList: chatListItem [];\r\n  messageList: messageList;\r\n  nameActiveChat: string;\r\n  currentUser: string;\r\n\r\n  constructor(chatList: chatListItem[], messageList: messageList) {\r\n    this.chatList = chatList;\r\n    this.messageList = messageList;\r\n    this.nameActiveChat = localStorage.nameActiveChat || chatList[0].name;\r\n    this.currentUser = localStorage.currentUser || '';\r\n  }\r\n\r\n  // инициализация localStorage - сохраняем список чатов, сообщения всех чатов и имя активного чата для добавления сообщений\r\n  initStorage() {\r\n    if (!localStorage.chatList) {\r\n      localStorage.chatList = JSON.stringify(this.chatList);\r\n      localStorage.messageList = JSON.stringify(this.messageList);\r\n      localStorage.nameActiveChat = this.nameActiveChat;\r\n    }\r\n  }\r\n\r\n  getChatList() {\r\n    return JSON.parse(localStorage.chatList);\r\n  }\r\n\r\n  getMessageList() {\r\n    return JSON.parse(localStorage.messageList);\r\n  }\r\n\r\n  setNameActiveChat(name: string) {\r\n    this.nameActiveChat = name;\r\n    localStorage.nameActiveChat = this.nameActiveChat;\r\n  }\r\n\r\n  getNameActiveChat() {\r\n    return localStorage.nameActiveChat;\r\n  }\r\n\r\n  setCurrentUser(user: string): void {\r\n    this.currentUser = user;\r\n    localStorage.currentUser = this.currentUser;\r\n  }\r\n\r\n  getCurrentUser(): string {\r\n    return localStorage.currentUser;\r\n  }\r\n\r\n  // обновляем массив сообщений текущего чата после отправки сообщения\r\n  setStorage(nameChat: string, messageList: { users: user [], messages: message [] }): void {\r\n    const temp = this.getMessageList();\r\n    temp[nameChat] = messageList;\r\n    this.messageList = temp;\r\n    this.nameActiveChat = nameChat;\r\n    localStorage.messageList = JSON.stringify(this.messageList);\r\n  }\r\n\r\n  // обновляем массив пользователей - добавляем имя пользователя, под которым был совершен вход в систему\r\n  addCurrentUser(user: string): void {\r\n    const temp: messageList = JSON.parse(localStorage.messageList);\r\n    for (let messagesListItem in temp) {\r\n      temp[messagesListItem].users.push({\r\n        login: user,\r\n        avatarUrl: ''\r\n      });\r\n    }\r\n    this.messageList = temp;\r\n    localStorage.messageList = JSON.stringify(this.messageList);\r\n  }\r\n};","import React, { Component, FormEvent, ChangeEvent } from 'react';\r\nimport './AutorizationForm.css';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype stateType = {\r\n  login: string,\r\n  password: string,\r\n  validity: boolean\r\n};\r\n\r\ntype AutorizationFormProps = {\r\n  getCurrentUser: (name: string) => void\r\n};\r\n\r\nexport class AutorizationForm extends Component<RouteComponentProps & AutorizationFormProps> {\r\n\r\n  state: stateType = {\r\n    login: '',\r\n    password: '',\r\n    validity: false,\r\n  };\r\n\r\n  // валидация обоих полей\r\n  inputValidity = () => {\r\n    if (this.state.login.length > 0 && this.state.password.length > 0) {\r\n      this.setState( () => ({validity: true}) );\r\n    } else {\r\n      this.setState( () => ({validity: false}) );\r\n    }\r\n  }\r\n\r\n  handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.name === 'login') {\r\n      this.setState({ login: event.target.value }, () => this.inputValidity());\r\n    }\r\n    if (event.target.name === 'password') {\r\n      this.setState({ password: event.target.value }, () => this.inputValidity());\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (this.state.validity) {\r\n      this.props.history.push('/planktonics-intranet/messenger');\r\n    }\r\n    this.props.getCurrentUser(this.state.login);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={ this.handleSubmit } className=\"AutorizationForm\">\r\n        <input type=\"text\" \r\n               onChange={ this.handleChange } \r\n               value={ this.state.login } \r\n               name=\"login\" \r\n               placeholder=\"Логин\" \r\n               autoComplete=\"off\" \r\n               className=\"AutorizationForm__input\" \r\n               required />\r\n        <input type=\"password\" \r\n               onChange={ this.handleChange } \r\n               value={ this.state.password } \r\n               name=\"password\" \r\n               placeholder=\"Пароль\" \r\n               autoComplete=\"off\" \r\n               className=\"AutorizationForm__input\" \r\n               required />\r\n        <button type=\"submit\" className=\"AutorizationForm__button\">Войти</button>\r\n      </form>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './Messanger.css';\r\nimport { RouteComponentProps, Route } from 'react-router-dom';\r\nimport { ChatList } from '../ChatList/ChatList';\r\nimport { Chat } from '../Chat/Chat';\r\nimport { initialChatList } from '../../data/initilalChatList'; //исходные данные чатов\r\nimport { initialMessageList} from '../../data/initialMessageList'; //исходные данные сообщений\r\nimport { DataStorage } from '../../modules/dataStorage'; // API localStorage\r\nimport { user, message } from '../../types'; //types\r\nimport { AutorizationForm } from '../AutorizationForm/AutorizationForm';\r\n\r\n// сохраняем исходные данные в локальном хранилище\r\nconst dataStorage = new DataStorage(initialChatList, initialMessageList);\r\ndataStorage.initStorage();\r\n\r\ntype stateProps = {\r\n  messageList: { users: user [], messages: message [] },\r\n  nameCurrentChat: string,\r\n  currentUser: string\r\n};\r\n\r\nexport class Messanger extends Component<RouteComponentProps>  {\r\n\r\n  // список сообщений, отображаемых в чате получаем из state, который может быть изменен либо при выборе другого чата, \r\n  // либо после добавления сообщений\r\n  state: stateProps = {\r\n    messageList:  dataStorage.getMessageList()[dataStorage.getNameActiveChat()] || {users: [], messages: []},\r\n    nameCurrentChat: dataStorage.getNameActiveChat() || '',\r\n    currentUser: dataStorage.getCurrentUser() || ''\r\n  };\r\n\r\n  // функция передается компоненту ChatListItem - для изменения значения state - при выборе другого чата\r\n  setMessageList = (name: string): void => {\r\n    this.setState({ \r\n      messageList: dataStorage.getMessageList()[name],\r\n      nameCurrentChat: name\r\n    });\r\n    dataStorage.setNameActiveChat(name);\r\n  }\r\n\r\n  // добавление сообщения в state и localStorage\r\n  addNewMessage = (message: string): void => {\r\n    const idNewMessage = (this.state.messageList.messages.length + 1).toString().padStart(4, '0');\r\n    this.setState((prevState: stateProps) => ({\r\n      messageList: {\r\n        users: prevState.messageList.users,\r\n        messages: prevState.messageList.messages.concat({\r\n          date: (new Date()).getTime(), \r\n          author: this.state.currentUser, \r\n          text: message, \r\n          id: idNewMessage\r\n        })\r\n      }\r\n    }), () => dataStorage.setStorage(this.state.nameCurrentChat, this.state.messageList));\r\n  }\r\n\r\n  // удаление сообщений, обновление localStorage\r\n  deleteMessage = (idMessage: string): void => {\r\n    this.setState((prevState: stateProps) => ({\r\n      messageList: {\r\n        users: prevState.messageList.users,\r\n        messages: prevState.messageList.messages.filter(message => message.id !== idMessage)\r\n      }\r\n    }), () => dataStorage.setStorage(this.state.nameCurrentChat, this.state.messageList));\r\n  }\r\n\r\n  // сохранение текущего user после входа в систему во всех чатах в localStorage\r\n  getcurrentUser = (user: string): void => {\r\n    this.setState({currentUser: user});\r\n    dataStorage.setCurrentUser(user);\r\n    dataStorage.addCurrentUser(user);\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <div className=\"Messanger\">\r\n        <Route exact path=\"/planktonics-intranet\"><AutorizationForm {...this.props} getCurrentUser={ this.getcurrentUser } /></Route>\r\n        <Route path=\"/planktonics-intranet/messenger\">\r\n          <header className=\"Messanger__header\">\r\n            <h1 className=\"Messanger__title\">Planktonics Intranet</h1>\r\n            <h2 className=\"Messanger__user\">{this.state.currentUser}</h2>\r\n          </header>\r\n          <main className=\"Messanger__main\">\r\n            <ChatList {...this.props} chats={ dataStorage.getChatList() } getSelectChatId={ this.setMessageList } />\r\n            <Route path=\"/planktonics-intranet/messenger/chats\">\r\n              <Chat messageList={ this.state.messageList } \r\n                    addMessage={ this.addNewMessage }\r\n                    deleteMessage={ this.deleteMessage } \r\n                    currentUser={ this.state.currentUser }/>\r\n            </Route>\r\n          </main>\r\n          <footer className=\"Messanger__footer\">\r\n            <h2 className=\"Messanger__author\">&copy;arakhimov</h2>\r\n          </footer>\r\n        </Route>\r\n      </div>\r\n    );\r\n  }\r\n};","import { chatListItem } from '../types';\r\n\r\nexport const initialChatList: chatListItem [] = [\r\n  {\r\n    imageUrl: 'https://im0-tub-ru.yandex.net/i?id=7db1f856c2cf5bd97ff9bb190613c3f9&n=13&exp=1',\r\n    name: 'general',\r\n    id: '0001',\r\n    date: 0,\r\n    lastMessageText: ''    \r\n  },\r\n  {\r\n    imageUrl: 'https://yandex.ru/images/_crpd/Joli13717/c7d9679kZNM/TDs9OHZvuYToftjzLbekwzvQwR3QxWcI42FEnViRzuHNxXxa_yYNhrANcazr0b2LzQW7xM5YJIx6V2m7KlSSmEx8qb11uOvA_fyP5ON5Kpjw3k_CmNtvAnJgB5wPg10k3dzzQ',\r\n    name: 'communications',\r\n    id: '0002',\r\n    date: 0,\r\n    lastMessageText: ''\r\n  }\r\n];","import React from 'react';\r\nimport { BrowserRouter as Router, withRouter } from 'react-router-dom';\r\nimport { Messanger } from '../Messanger/Messanger';\r\n\r\nconst MessangerWithRouter = withRouter(Messanger);\r\n\r\nexport const App:React.FC = () => (<Router><MessangerWithRouter /></Router>);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}